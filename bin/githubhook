#!/usr/bin/env node

var child_process = require('child_process'),
  docopt = require('docopt'),
  multiline = require('multiline'),
  path = require('path');

var githubhook = require('../');


var doc = multiline(function() {/*

Usage:
  githubhook [--host=HOST] [--port=PORT] [--callback=URL_PATH] [--secret=SECRET] [--verbose] <trigger> <script>

Options:

  --host=HOST             Address to listen on
  --port=PORT             Port to listen on
  --callback=URL_PATH     The callback URL path
  --secret=SECRET         The secret you use the in the Github webhook config
  --verbose                 Log to console
  --version                 Output the version number
  -h, --help                Output usage information

*/});


var options = docopt.docopt(doc, {
  version: require('../package.json').version,
  help: true,
  options_first: false,
  exit: true
});


var github = githubhook({
  host: options['--host'],
  port: options['--port'] ? parseInt(options['--port']) : null,
  path: options['--callback'],
  secret: options['--secret'],
  logger: options['--verbose'] ? console : null,
});

// start it!
github.listen();

// trigger
github.on(options['<trigger>'], function () {
  // Convert arguments to an array
  var args = Array.prototype.slice.call(arguments);
  var scriptPath = path.resolve(options['<script>']);

  // Parse key data points (always the last argument)
  var data = args.slice(-1).pop();
  var repo = data ? data.repository.name : null;
  var ref = data ? data.ref : null;

  child_process.execFile(scriptPath, [ repo, ref ], function(err, stdout, stderr) {
    if (options['--verbose']) {
      console.log('--> EXEC', scriptPath, repo, ref);

      if (err) {
        console.error(err.stack);
      } else {
        console.error(stderr);
        console.log(stdout);
      }

      console.log('--- END', scriptPath);
    }
  });
});

